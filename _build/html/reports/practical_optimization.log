Traceback (most recent call last):
  File "/opt/homebrew/Caskroom/miniconda/base/envs/cvxpy_env/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/opt/homebrew/Caskroom/miniconda/base/envs/cvxpy_env/lib/python3.10/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/homebrew/Caskroom/miniconda/base/envs/cvxpy_env/lib/python3.10/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/homebrew/Caskroom/miniconda/base/envs/cvxpy_env/lib/python3.10/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/homebrew/Caskroom/miniconda/base/envs/cvxpy_env/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/opt/homebrew/Caskroom/miniconda/base/envs/cvxpy_env/lib/python3.10/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/opt/homebrew/Caskroom/miniconda/base/envs/cvxpy_env/lib/python3.10/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/homebrew/Caskroom/miniconda/base/envs/cvxpy_env/lib/python3.10/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import cvxpy as cp
from gurobipy import *

# Define the problem data
n = 2
m = 2
A = np.array([[-2, 3], [3, 2]])
b = np.array([6, 12])
c = np.array([0.4, 0.6])

# Define the decision variables
x = cp.Variable(n)

# Define the objective function
obj = cp.Minimize(c @ x)

# Define the constraints
constraints = [A @ x >= b, x >= 0]

# Solve the problem using CVXPY and Gurobi
prob = cp.Problem(obj, constraints)
prob.solve(solver=GUROBI)

# Print the optimal value and the optimal solution
print("Optimal value =", prob.value)
print("Optimal solution =", x.value)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[8], line 22[0m
[1;32m     20[0m [38;5;66;03m# Solve the problem using CVXPY and Gurobi[39;00m
[1;32m     21[0m prob [38;5;241m=[39m cp[38;5;241m.[39mProblem(obj, constraints)
[0;32m---> 22[0m prob[38;5;241m.[39msolve(solver[38;5;241m=[39m[43mGUROBI[49m)
[1;32m     24[0m [38;5;66;03m# Print the optimal value and the optimal solution[39;00m
[1;32m     25[0m [38;5;28mprint[39m([38;5;124m"[39m[38;5;124mOptimal value =[39m[38;5;124m"[39m, prob[38;5;241m.[39mvalue)

[0;31mNameError[0m: name 'GUROBI' is not defined
NameError: name 'GUROBI' is not defined

