Traceback (most recent call last):
  File "/opt/homebrew/Caskroom/miniconda/base/envs/cvxpy_env/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/opt/homebrew/Caskroom/miniconda/base/envs/cvxpy_env/lib/python3.10/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/homebrew/Caskroom/miniconda/base/envs/cvxpy_env/lib/python3.10/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/homebrew/Caskroom/miniconda/base/envs/cvxpy_env/lib/python3.10/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/homebrew/Caskroom/miniconda/base/envs/cvxpy_env/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/opt/homebrew/Caskroom/miniconda/base/envs/cvxpy_env/lib/python3.10/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/opt/homebrew/Caskroom/miniconda/base/envs/cvxpy_env/lib/python3.10/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/homebrew/Caskroom/miniconda/base/envs/cvxpy_env/lib/python3.10/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import cvxpy as cp
import gurobipy as gp
from gurobipy import GRB
import mosek

# Define binary optimization problem
x = cp.Variable(3, boolean=True)
objective = cp.Minimize(x[0] + x[1] + x[2])
constraints = [x[0] + x[1] <= 1, x[1] + x[2] <= 1]
problem = cp.Problem(objective, constraints)

# Solve using CVXPY
solver = cp.MOSEK
problem.solve(solver=solver)

# Print results
print("CVXPY Solution:")
print("status:", problem.status)
print("optimal value:", problem.value)
print("optimal x:", x.value)

# Solve using Gurobi
model = gp.Model()
model.setParam('OutputFlag', 0)
x = model.addMVar(3, vtype=GRB.BINARY)
obj = x[0] + x[1] + x[2]
model.setObjective(obj)
model.addConstr(x[0] + x[1] <= 1)
model.addConstr(x[1] + x[2] <= 1)
model.setParam('OutputFlag', 0)
model.optimize()

# Print results
print("Gurobi Solution:")
print("status:", model.status)
print("optimal value:", model.objVal)
print("optimal x:", x.X)
```{code-cell}

------------------

[0;36m  Cell [0;32mIn[4], line 38[0;36m[0m
[0;31m    ```{code-cell}[0m
[0m    ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax

SyntaxError: invalid syntax (965974895.py, line 38)

