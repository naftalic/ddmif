Traceback (most recent call last):
  File "/opt/homebrew/Caskroom/miniconda/base/envs/cvxpy_env/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/opt/homebrew/Caskroom/miniconda/base/envs/cvxpy_env/lib/python3.10/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/homebrew/Caskroom/miniconda/base/envs/cvxpy_env/lib/python3.10/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/homebrew/Caskroom/miniconda/base/envs/cvxpy_env/lib/python3.10/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/homebrew/Caskroom/miniconda/base/envs/cvxpy_env/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/opt/homebrew/Caskroom/miniconda/base/envs/cvxpy_env/lib/python3.10/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/opt/homebrew/Caskroom/miniconda/base/envs/cvxpy_env/lib/python3.10/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/homebrew/Caskroom/miniconda/base/envs/cvxpy_env/lib/python3.10/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import cvxpy as cp
import numpy as np
import gurobipy as grb

# Define the data
np.random.seed(1)
n = 5
r = np.random.rand(n)  # expected returns
sigma = np.random.rand(n)  # standard deviations
cov = np.diag(sigma)  # covariance matrix
target_return = 0.05  # target expected return

# Define the variables
w = cp.Variable(n)

# Define the constraints
constraints = [
    cp.sum(w) == 1,  # budget constraint
    w >= 0  # long-only constraint
]

# Define the objective function
objective = cp.Maximize((r @ w) / cp.sqrt(cp.quad_form(w, cov)))

# Define the problem
prob = cp.Problem(objective, constraints)

# Solve the problem using Gurobi
prob.solve(solver=cp.GUROBI)

# Print the results
print("Optimal portfolio:")
for i in range(n):
    print(f"Asset {i+1}: {w.value[i]:.4f}")
print(f"Expected return: {(r @ w.value):.4f}")
print(f"Standard deviation: {cp.sqrt(cp.quad_form(w.value, cov)).value:.4f}")
print(f"Sharpe ratio: {(r @ w.value) / cp.sqrt(cp.quad_form(w.value, cov)).value:.4f}")
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mDCPError[0m                                  Traceback (most recent call last)
Cell [0;32mIn[11], line 29[0m
[1;32m     26[0m prob [38;5;241m=[39m cp[38;5;241m.[39mProblem(objective, constraints)
[1;32m     28[0m [38;5;66;03m# Solve the problem using Gurobi[39;00m
[0;32m---> 29[0m [43mprob[49m[38;5;241;43m.[39;49m[43msolve[49m[43m([49m[43msolver[49m[38;5;241;43m=[39;49m[43mcp[49m[38;5;241;43m.[39;49m[43mGUROBI[49m[43m)[49m
[1;32m     31[0m [38;5;66;03m# Print the results[39;00m
[1;32m     32[0m [38;5;28mprint[39m([38;5;124m"[39m[38;5;124mOptimal portfolio:[39m[38;5;124m"[39m)

File [0;32m/opt/homebrew/Caskroom/miniconda/base/envs/cvxpy_env/lib/python3.10/site-packages/cvxpy/problems/problem.py:493[0m, in [0;36mProblem.solve[0;34m(self, *args, **kwargs)[0m
[1;32m    491[0m [38;5;28;01melse[39;00m:
[1;32m    492[0m     solve_func [38;5;241m=[39m Problem[38;5;241m.[39m_solve
[0;32m--> 493[0m [38;5;28;01mreturn[39;00m [43msolve_func[49m[43m([49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m

File [0;32m/opt/homebrew/Caskroom/miniconda/base/envs/cvxpy_env/lib/python3.10/site-packages/cvxpy/problems/problem.py:1054[0m, in [0;36mProblem._solve[0;34m(self, solver, warm_start, verbose, gp, qcp, requires_grad, enforce_dpp, ignore_dpp, canon_backend, **kwargs)[0m
[1;32m   1051[0m         [38;5;28mself[39m[38;5;241m.[39munpack(chain[38;5;241m.[39mretrieve(soln))
[1;32m   1052[0m         [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39mvalue
[0;32m-> 1054[0m data, solving_chain, inverse_data [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mget_problem_data[49m[43m([49m
[1;32m   1055[0m [43m    [49m[43msolver[49m[43m,[49m[43m [49m[43mgp[49m[43m,[49m[43m [49m[43menforce_dpp[49m[43m,[49m[43m [49m[43mignore_dpp[49m[43m,[49m[43m [49m[43mverbose[49m[43m,[49m[43m [49m[43mcanon_backend[49m[43m,[49m[43m [49m[43mkwargs[49m
[1;32m   1056[0m [43m[49m[43m)[49m
[1;32m   1058[0m [38;5;28;01mif[39;00m verbose:
[1;32m   1059[0m     [38;5;28mprint[39m(_NUM_SOLVER_STR)

File [0;32m/opt/homebrew/Caskroom/miniconda/base/envs/cvxpy_env/lib/python3.10/site-packages/cvxpy/problems/problem.py:631[0m, in [0;36mProblem.get_problem_data[0;34m(self, solver, gp, enforce_dpp, ignore_dpp, verbose, canon_backend, solver_opts)[0m
[1;32m    629[0m [38;5;28;01mif[39;00m key [38;5;241m!=[39m [38;5;28mself[39m[38;5;241m.[39m_cache[38;5;241m.[39mkey:
[1;32m    630[0m     [38;5;28mself[39m[38;5;241m.[39m_cache[38;5;241m.[39minvalidate()
[0;32m--> 631[0m     solving_chain [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_construct_chain[49m[43m([49m
[1;32m    632[0m [43m        [49m[43msolver[49m[38;5;241;43m=[39;49m[43msolver[49m[43m,[49m[43m [49m[43mgp[49m[38;5;241;43m=[39;49m[43mgp[49m[43m,[49m
[1;32m    633[0m [43m        [49m[43menforce_dpp[49m[38;5;241;43m=[39;49m[43menforce_dpp[49m[43m,[49m
[1;32m    634[0m [43m        [49m[43mignore_dpp[49m[38;5;241;43m=[39;49m[43mignore_dpp[49m[43m,[49m
[1;32m    635[0m [43m        [49m[43mcanon_backend[49m[38;5;241;43m=[39;49m[43mcanon_backend[49m[43m,[49m
[1;32m    636[0m [43m        [49m[43msolver_opts[49m[38;5;241;43m=[39;49m[43msolver_opts[49m[43m)[49m
[1;32m    637[0m     [38;5;28mself[39m[38;5;241m.[39m_cache[38;5;241m.[39mkey [38;5;241m=[39m key
[1;32m    638[0m     [38;5;28mself[39m[38;5;241m.[39m_cache[38;5;241m.[39msolving_chain [38;5;241m=[39m solving_chain

File [0;32m/opt/homebrew/Caskroom/miniconda/base/envs/cvxpy_env/lib/python3.10/site-packages/cvxpy/problems/problem.py:883[0m, in [0;36mProblem._construct_chain[0;34m(self, solver, gp, enforce_dpp, ignore_dpp, canon_backend, solver_opts)[0m
[1;32m    881[0m candidate_solvers [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_find_candidate_solvers(solver[38;5;241m=[39msolver, gp[38;5;241m=[39mgp)
[1;32m    882[0m [38;5;28mself[39m[38;5;241m.[39m_sort_candidate_solvers(candidate_solvers)
[0;32m--> 883[0m [38;5;28;01mreturn[39;00m [43mconstruct_solving_chain[49m[43m([49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[43mcandidate_solvers[49m[43m,[49m[43m [49m[43mgp[49m[38;5;241;43m=[39;49m[43mgp[49m[43m,[49m
[1;32m    884[0m [43m                               [49m[43menforce_dpp[49m[38;5;241;43m=[39;49m[43menforce_dpp[49m[43m,[49m
[1;32m    885[0m [43m                               [49m[43mignore_dpp[49m[38;5;241;43m=[39;49m[43mignore_dpp[49m[43m,[49m
[1;32m    886[0m [43m                               [49m[43mcanon_backend[49m[38;5;241;43m=[39;49m[43mcanon_backend[49m[43m,[49m
[1;32m    887[0m [43m                               [49m[43msolver_opts[49m[38;5;241;43m=[39;49m[43msolver_opts[49m[43m)[49m

File [0;32m/opt/homebrew/Caskroom/miniconda/base/envs/cvxpy_env/lib/python3.10/site-packages/cvxpy/reductions/solvers/solving_chain.py:184[0m, in [0;36mconstruct_solving_chain[0;34m(problem, candidates, gp, enforce_dpp, ignore_dpp, canon_backend, solver_opts)[0m
[1;32m    182[0m [38;5;28;01mif[39;00m [38;5;28mlen[39m(problem[38;5;241m.[39mvariables()) [38;5;241m==[39m [38;5;241m0[39m:
[1;32m    183[0m     [38;5;28;01mreturn[39;00m SolvingChain(reductions[38;5;241m=[39m[ConstantSolver()])
[0;32m--> 184[0m reductions [38;5;241m=[39m [43m_reductions_for_problem_class[49m[43m([49m[43mproblem[49m[43m,[49m[43m [49m[43mcandidates[49m[43m,[49m[43m [49m[43mgp[49m[43m,[49m[43m [49m[43msolver_opts[49m[43m)[49m
[1;32m    186[0m [38;5;66;03m# Process DPP status of the problem.[39;00m
[1;32m    187[0m dpp_context [38;5;241m=[39m [38;5;124m'[39m[38;5;124mdcp[39m[38;5;124m'[39m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m gp [38;5;28;01melse[39;00m [38;5;124m'[39m[38;5;124mdgp[39m[38;5;124m'[39m

File [0;32m/opt/homebrew/Caskroom/miniconda/base/envs/cvxpy_env/lib/python3.10/site-packages/cvxpy/reductions/solvers/solving_chain.py:102[0m, in [0;36m_reductions_for_problem_class[0;34m(problem, candidates, gp, solver_opts)[0m
[1;32m     99[0m     [38;5;28;01melif[39;00m problem[38;5;241m.[39mis_dqcp():
[1;32m    100[0m         append [38;5;241m+[39m[38;5;241m=[39m ([38;5;124m"[39m[38;5;130;01m\n[39;00m[38;5;124mHowever, the problem does follow DQCP rules. [39m[38;5;124m"[39m
[1;32m    101[0m                    [38;5;124m"[39m[38;5;124mConsider calling solve() with `qcp=True`.[39m[38;5;124m"[39m)
[0;32m--> 102[0m     [38;5;28;01mraise[39;00m DCPError(
[1;32m    103[0m         [38;5;124m"[39m[38;5;124mProblem does not follow DCP rules. Specifically:[39m[38;5;130;01m\n[39;00m[38;5;124m"[39m [38;5;241m+[39m append)
[1;32m    104[0m [38;5;28;01melif[39;00m gp [38;5;129;01mand[39;00m [38;5;129;01mnot[39;00m problem[38;5;241m.[39mis_dgp():
[1;32m    105[0m     append [38;5;241m=[39m build_non_disciplined_error_msg(problem, [38;5;124m'[39m[38;5;124mDGP[39m[38;5;124m'[39m)

[0;31mDCPError[0m: Problem does not follow DCP rules. Specifically:
The objective is not DCP. Its following subexpressions are not:
power(QuadForm(var497, [[0.09233859 0.         0.         0.         0.        ]
 [0.         0.18626021 0.         0.         0.        ]
 [0.         0.         0.34556073 0.         0.        ]
 [0.         0.         0.         0.39676747 0.        ]
 [0.         0.         0.         0.         0.53881673]]), 0.5)
DCPError: Problem does not follow DCP rules. Specifically:
The objective is not DCP. Its following subexpressions are not:
power(QuadForm(var497, [[0.09233859 0.         0.         0.         0.        ]
 [0.         0.18626021 0.         0.         0.        ]
 [0.         0.         0.34556073 0.         0.        ]
 [0.         0.         0.         0.39676747 0.        ]
 [0.         0.         0.         0.         0.53881673]]), 0.5)

